"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class PriorityQueue {
    constructor() {
        this._uselist = [];
    }
    use(key) {
        if (key == undefined || key == null)
            return;
        key = key.toString();
        let index = this._uselist.indexOf(key);
        if (index >= 0) {
            this._uselist.splice(index, 1);
        }
        this._uselist.push(key);
    }
    del(key) {
        key = key.toString();
        let index = this._uselist.indexOf(key);
        if (index >= 0) {
            this._uselist.splice(index, 1);
        }
    }
    clear() {
        this._uselist = [];
    }
    get length() {
        return this._uselist.length;
    }
    getLast(n) {
        let idx_a = Math.max(0, this.length - n);
        return this._uselist.slice(idx_a, this.length);
    }
}
exports.PriorityQueue = PriorityQueue;
class HashMap {
    constructor() {
        this._data = {};
        this.auto_size = 0;
        this._keys = [];
        this._list = new PriorityQueue();
    }
    has(key) {
        key = key.toString();
        if (this.auto_size) {
            this._list.use(key);
        }
        return this._data.hasOwnProperty(key);
    }
    get(key) {
        key = key.toString();
        this.use(key);
        return this._data[key] || [];
    }
    add(key, v) {
        key = key.toString();
        if (!this._data[key]) {
            this.set(key, [v]);
        }
        else {
            this._data[key].push(v);
            this.use(key);
        }
    }
    use(key) {
        if (this.auto_size) {
            this._list.use(key);
        }
    }
    get keys() {
        return this._keys;
    }
    set(key, v) {
        key = key.toString();
        this._data[key] = v;
        this.use(key);
        this._auto_release();
        this._keys = Object.keys(this._data);
    }
    clear() {
        this._data = {};
        this._list.clear();
        this._keys = Object.keys(this._data);
    }
    find(key, fkey, fv) {
        if (!key)
            return [];
        let keys = fkey.split('.');
        let out = [];
        key = key.toString();
        let rkV = this.get(key);
        if (rkV.length <= 0) {
            return out;
        }
        for (let i = 0; i < rkV.length; i++) {
            let info = rkV[i];
            if (this._list_find(info, keys, fv)) {
                out.push(info);
            }
        }
        return out;
    }
    _list_find(obj, keys, fv) {
        keys = [...keys];
        if (!obj || typeof obj != 'object' || keys.length == 0) {
            return false;
        }
        let rk = keys.shift();
        if (keys.length == 0) {
            return obj[rk] == fv;
        }
        return this._list_find(obj[rk], keys, fv);
    }
    _list_rest(obj, keys, restv) {
        keys = [...keys];
        if (!obj || typeof obj != 'object' || keys.length == 0) {
            return false;
        }
        let rk = keys.shift();
        if (keys.length == 0) {
            return obj[rk] = restv;
        }
        return this._list_rest(obj[rk], keys, restv);
    }
    find2Reset(key, fkey, fv, dkey, restv) {
        let keys = fkey.split('.');
        let keys2 = dkey.split('.');
        key = key.toString();
        let rkV = this.get(key);
        if (rkV.length > 0) {
            for (let i = 0; i < rkV.length; i++) {
                let info = rkV[i];
                if (this._list_find(info, keys, fv)) {
                    this._list_rest(info, keys2, restv);
                    return true;
                }
            }
        }
        return false;
    }
    find2Del(key, fkey, fv) {
        let keys = fkey.split('.');
        key = key.toString();
        let rkV = this.get(key);
        if (rkV.length > 0) {
            for (let i = 0; i < rkV.length; i++) {
                let info = rkV[i];
                if (this._list_find(info, keys, fv)) {
                    rkV.splice(i, 1);
                    return true;
                }
            }
        }
        return false;
    }
    del(key) {
        key = key.toString();
        delete this._data[key];
        this._list.del(key);
    }
    _auto_release() {
        if (!this.auto_size)
            return;
        if (this._list.length <= this.auto_size)
            return;
        let dels = this._list.getLast(this._list.length - this.auto_size);
        for (let i = 0; i < dels.length; i++) {
            this.del(dels[i]);
        }
    }
}
exports.HashMap = HashMap;
class TeMap {
    constructor(_data) {
        this._data = {};
        this.auto_size = 0;
        this._list = new PriorityQueue();
        if (_data) {
            this._data = _data;
        }
    }
    has(key) {
        if (key == undefined || key == null)
            return false;
        this.use(key);
        return this._data.hasOwnProperty(key.toString());
    }
    get(key) {
        if (!this.has(key))
            return null;
        this.use(key);
        return this._data[key];
    }
    set(key, v) {
        if (v == undefined) {
            delete this._data[key];
        }
        else {
            this.use(key);
            this._data[key] = v;
        }
        this._auto_release();
    }
    use(key) {
        if (this.auto_size) {
            this._list.use(key);
        }
    }
    get keys() {
        return Object.keys(this._data);
    }
    del(key) {
        let obj = this._data[key];
        if (obj && typeof obj == 'object' && obj['destory'] && typeof obj['destory'] == 'function') {
            obj['destory']();
        }
        delete this._data[key];
        this._list.del(key);
    }
    rand() {
        let keys = this.keys;
        let tid = keys[Math.floor(Math.random() * keys.length)];
        return this.get(tid);
    }
    clear() {
        this._data = {};
        this._list.clear();
    }
    _auto_release() {
        if (!this.auto_size)
            return;
        if (this._list.length <= this.auto_size)
            return;
        let dels = this._list.getLast(this._list.length - this.auto_size);
        for (let i = 0; i < dels.length; i++) {
            this.del(dels[i]);
        }
    }
}
exports.TeMap = TeMap;
