"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const formate_json_1 = require("./formate_json");
const parse_json_1 = require("./parse_json");
const protobufjs_1 = __importDefault(require("protobufjs"));
const debug_1 = require("debug");
let Debug = debug_1.debug("jsonpb");
let package_msg_unit = {};
let package_pb_roots = {};
let package_msg_map = {};
function pb_regist_roles(pack, msg, map2list, list2map) {
    if (!package_msg_unit.hasOwnProperty(pack)) {
        package_msg_unit[pack] = {};
    }
    package_msg_unit[pack][msg] = { map2list: [...map2list], list2map: [...list2map] };
}
exports.pb_regist_roles = pb_regist_roles;
function pb_parse_jsons(pack, msg, info) {
    if (!package_msg_map[pack])
        package_msg_map[pack] = {};
    package_msg_map[pack][msg] = (package_msg_map[pack][msg] || 0) + 1;
    if (package_msg_unit.hasOwnProperty(pack)) {
        let p_info = package_msg_unit[pack][msg];
        if (p_info) {
            return parse_json_1.parse_msg(pack, msg, formate_json_1.encode(info, [...p_info.map2list], [...p_info.list2map]));
        }
    }
    parse_json_1.parse_msg(pack, msg, info);
}
exports.pb_parse_jsons = pb_parse_jsons;
function pb_create_proto(pack, use_using = false) {
    if (use_using) {
        if (package_pb_roots.hasOwnProperty(pack)) {
            return package_pb_roots[pack].proto;
        }
    }
    let pbtext = `syntax = "proto3";\npackage ${pack};\n`;
    if (!package_msg_map.hasOwnProperty(pack)) {
        return pbtext;
    }
    let infos = package_msg_map[pack];
    for (let key in infos) {
        pbtext += parse_json_1.create_pb(pack, key);
    }
    pb_generate(pack, pbtext);
    return pbtext;
}
exports.pb_create_proto = pb_create_proto;
function pb_generate(pack, pbtext) {
    if (!pbtext) {
        pbtext = pb_create_proto(pack);
    }
    package_pb_roots[pack] = { root: protobufjs_1.default.parse(pbtext).root, proto: pbtext };
}
function pb_encode(pack, msg, info) {
    let change_info = {};
    if (package_msg_unit.hasOwnProperty(pack) && package_msg_unit[pack].hasOwnProperty(msg)) {
        let p_info = package_msg_unit[pack][msg];
        if (p_info) {
            change_info = formate_json_1.encode(info, [...p_info.map2list], [...p_info.list2map]);
        }
    }
    else if (typeof info == 'string') {
        change_info = JSON.parse(info);
    }
    else {
        change_info = info;
    }
    if (!package_pb_roots.hasOwnProperty(pack)) {
        pb_generate(pack);
    }
    if (package_pb_roots.hasOwnProperty(pack)) {
        try {
            return { pb: true, value: package_pb_roots[pack].root.lookupType(pack + '.' + msg).encode(change_info).finish() };
        }
        catch (e) {
        }
    }
    return { pb: false, value: Buffer.from(JSON.stringify(info)) };
}
exports.pb_encode = pb_encode;
function pb_decode(pack, msg, info) {
    if (info == undefined || info == null)
        return { pb: false, value: null };
    let pData = { pb: false, value: null };
    if (!package_pb_roots.hasOwnProperty(pack)) {
        pb_generate(pack);
    }
    if (package_pb_roots.hasOwnProperty(pack)) {
        try {
            pData = { pb: true, value: package_pb_roots[pack].root.lookupType(pack + '.' + msg).decode(info).toJSON() };
        }
        catch (e) {
            pData = { pb: false, value: JSON.parse(info.toString()) };
        }
    }
    else {
        pData = { pb: false, value: JSON.parse(info.toString()) };
    }
    if (package_msg_unit.hasOwnProperty(pack)) {
        let p_info = package_msg_unit[pack][msg];
        if (p_info) {
            pData.value = formate_json_1.decode(pData.value, [...p_info.map2list], [...p_info.list2map]);
        }
    }
    return pData;
}
exports.pb_decode = pb_decode;
