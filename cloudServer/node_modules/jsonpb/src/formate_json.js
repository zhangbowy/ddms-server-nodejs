"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function encode(obj, maplist = [], list2map = []) {
    let out = Formate_Json.encode(obj, maplist, list2map, '');
    if (out instanceof Array) {
        return { kv: out };
    }
    else {
        return out;
    }
}
exports.encode = encode;
function decode(obj, maplist = [], list2map = []) {
    if (obj['kv'] && Object.keys(obj).length == 1) {
        return Formate_Json.decode(obj['kv'], maplist, list2map, '');
    }
    else {
        return Formate_Json.decode(obj, maplist, list2map, '');
    }
}
exports.decode = decode;
class Formate_Json {
    static encode(obj, maplist, list2map, path = '') {
        if (maplist.length == 0)
            return obj;
        if (maplist[0] == '')
            return this.encode_map_to_list(obj);
        if (list2map[0] == '')
            return this.encode_list_to_map(obj);
        if (obj instanceof Array)
            return obj;
        let outinfo = {};
        for (let key in obj) {
            let use_path = path + key;
            if (maplist.length == 0) {
                outinfo[key] = obj[key];
            }
            else if (maplist.indexOf(use_path) != -1) {
                maplist.splice(maplist.indexOf(use_path), 1);
                outinfo[key] = this.encode_map_to_list(obj[key]);
            }
            else if (list2map.indexOf(use_path) != -1) {
                list2map.splice(list2map.indexOf(use_path), 1);
                outinfo[key] = this.encode_list_to_map(obj[key]);
            }
            else if (typeof obj[key] == 'object') {
                outinfo[key] = this.encode(obj[key], maplist, list2map, use_path + '.');
            }
            else {
                outinfo[key] = obj[key];
            }
        }
        return outinfo;
    }
    static encode_list_to_map(obj) {
        let out = {};
        for (let i = 0; i < obj.length; i++) {
            out['list' + i.toString()] = obj[i];
        }
        return out;
    }
    static encode_map_to_list(obj) {
        let out = [];
        for (let key in obj) {
            out.push({ k: key, v: obj[key] });
        }
        return out;
    }
    static decode(obj, maplist, list2map, path = '') {
        if (maplist.length == 0)
            return obj;
        if (maplist[0] == '')
            return this.decode_list_to_map(obj);
        if (list2map[0] == '')
            return this.decode_map_to_list(obj);
        if (obj instanceof Array)
            return obj;
        let outinfo = {};
        for (let key in obj) {
            let use_path = path + key;
            if (maplist.length == 0) {
                outinfo[key] = obj[key];
            }
            else if (maplist.indexOf(use_path) != -1) {
                maplist.splice(maplist.indexOf(use_path), 1);
                outinfo[key] = this.decode_list_to_map(obj[key]);
            }
            else if (list2map.indexOf(use_path) != -1) {
                list2map.splice(list2map.indexOf(use_path), 1);
                outinfo[key] = this.decode_map_to_list(obj[key]);
            }
            else if (typeof obj[key] == 'object') {
                outinfo[key] = this.decode(obj[key], maplist, list2map, use_path + '.');
            }
            else {
                outinfo[key] = obj[key];
            }
        }
        return outinfo;
    }
    static decode_map_to_list(obj) {
        let out = [];
        for (let key in obj) {
            out[parseInt(key.replace('list', ''))] = obj[key];
        }
        return out;
    }
    static decode_list_to_map(obj) {
        let out = {};
        for (let i = 0; i < obj.length; i++) {
            out[obj[i].k] = obj[i].v;
        }
        return out;
    }
}
