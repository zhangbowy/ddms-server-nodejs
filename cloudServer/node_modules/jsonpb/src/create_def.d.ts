export interface ifMsgDescUnit {
    type: string;
    name: string;
    reauqred: boolean;
    repeated: boolean;
    default: string;
}
export declare class PriorityQueue {
    private _uselist;
    use(key: string | number): void;
    del(key: string | number): void;
    clear(): void;
    readonly length: number;
    getLast(n: number): string[];
}
export declare class HashMap<T> {
    _data: any;
    auto_size: number;
    _keys: string[];
    _list: PriorityQueue;
    constructor();
    has(key: string | number): any;
    get(key: string | number): T[];
    add(key: string | number, v: T): void;
    private use;
    readonly keys: string[];
    set(key: string | number, v: Array<T>): void;
    clear(): void;
    find(key: string | number, fkey: string, fv: any): T[];
    private _list_find;
    private _list_rest;
    find2Reset(key: string | number, fkey: string, fv: any, dkey: string, restv: any): boolean;
    find2Del(key: string | number, fkey: string, fv: any): boolean;
    del(key: string | number): void;
    private _auto_release;
}
export declare class TeMap<T> {
    _data: any;
    auto_size: number;
    _list: PriorityQueue;
    constructor(_data?: Object);
    has(key: string | number): any;
    get(key: string | number): T | null;
    set(key: string | number, v: T): void;
    private use;
    readonly keys: string[];
    del(key: string | number): void;
    rand(): T | null;
    clear(): void;
    private _auto_release;
}
